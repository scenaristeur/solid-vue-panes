{"version":3,"sources":["webpack:///./src/mixins/profileMixin.js","webpack:///./src/mixins/aclMixin.js"],"names":["fc","FC","auth","methods","getProfile","webId","profile","friends","fetchDocument","profileDoc","p","getSubject","name","getString","vcard","fn","organization","role","photo","getRef","hasPhoto","bday","gender","hasGender","note","getAllRefs","foaf","knows","addressUrl","hasAddress","add","locality","country","postal","region","address","this","getWorkspaces","workspaces","length","console","log","i","w","groups_folder","path","tensions_folder","readFolder","g_folder","t_folder","g_urls","files","t_urls","groups","tensions","makeToast","message","getInboxUrls","inbox_urls","ldp","inbox","getFriends","solid","data","storage","indexFile","itemExists","workspacesDoc","subjects","getAllSubjectsOfType","s","getLiteral","rdf","label","pod","push","subject","asRef","split","getGroups","forEach","folder","f","getTensions","addIndex","fullpath","classe","inst","dateObj","Date","date","toISOString","puti","$store","state","indexes","url","putiDoc","addSubject","newchat","addLiteral","rdfs","addNodeRef","dct","created","save","getIndexes","instances","classes","prti","getNodeRef","findSubjects","puIndexes","index","instance","undefined","title","content","variant","$bvToast","toast","configureInbox","inbox_url","inbox_log_file","inbox_exists","createFolder","logDoc","createDocument","schema","about","getSolidDatasetWithAcl","inboxtWithAcl","agentAccess","getAgentAccess","publicAccess","getPublicAccess","alert","inbox_log_file_exists","hasResourceAcl","hasAccessibleAcl","Error","hasFallbackAcl","resourceAcl","createAclFromFallbackAcl","getResourceAcl","updatedAgentResourceAccess","setAgentResourceAccess","read","append","write","control","updatedAgentDefaultAccess","setAgentDefaultAccess","updatedPublicResourceAccess","setPublicResourceAccess","updatedPublicDefaultAccess","setPublicDefaultAccess","saveAclFor","logFileWithAcl","logAcl","updatedPublicLogAccess"],"mappings":"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","file":"js/chunk-cd1e7e04.f9454d91.js","sourcesContent":["import { fetchDocument } from 'tripledoc';\nimport { vcard, foaf, dct, rdfs, ldp , rdf} from 'rdf-namespaces'\nimport auth from 'solid-auth-client';\nimport FC from 'solid-file-client'\nconst fc = new FC( auth )\n\nexport default {\n  methods: {\n    getProfile: async function(webId){\n      let profile = {friends:[]}\n      profile.webId = webId\n      try{\n        let profileDoc = await fetchDocument(webId);\n        const p = profileDoc.getSubject(webId)\n        profile.name = p.getString(vcard.fn)\n        profile.organization = p.getString(\"http://www.w3.org/2006/vcard/ns#organization-name\")\n        profile.role = p.getString(vcard.role)\n        profile.photo = p.getRef(vcard.hasPhoto)\n        profile.bday = p.getString(vcard.bday)\n        profile.gender = p.getString(vcard.hasGender)\n        profile.note = p.getString(vcard.note)\n        profile.friends = p.getAllRefs(foaf.knows)\n        //profile.trustedApps = p.getAllLiterals(\"http://www.w3.org/ns/auth/acl#trustedApp\")\n        //  console.log(p)\n        //  console.log(acl)\n\n        //must check if there are many addressUrl\n        let addressUrl = p.getRef(vcard.hasAddress)\n        //    console.log(\"Address Node \",addressUrl)\n        if (addressUrl != null){\n          let add = profileDoc.getSubject(addressUrl);\n          profile.locality = add.getString(vcard.locality)\n          profile.country = add.getString(\"http://www.w3.org/2006/vcard/ns#country-name\")\n          profile.postal = add.getString(\"http://www.w3.org/2006/vcard/ns#postal-code\")\n          profile.region = add.getString(vcard.region)\n          profile.address = add.getString(\"http://www.w3.org/2006/vcard/ns#street-address\")\n        }\n\n        profile.workspaces = await this.getWorkspaces(webId)\n\n        if (profile.workspaces.length > 0 ){\n          console.log(\"PF\",profile.workspaces)\n          for(let i in profile.workspaces){\n            let w = profile.workspaces[i]\n            if(w.name == \"gouvernance\"){\n              let groups_folder = w.path+\"groups\"\n              let tensions_folder = w.path+\"tensions\"\n              console.log(\"ww\",w, groups_folder, tensions_folder)\n              let g_folder = await fc.readFolder(groups_folder)\n              let t_folder = await fc.readFolder(groups_folder)\n              let g_urls = g_folder.files\n              let t_urls = t_folder.files\n              console.log(g_urls, t_urls)\n              profile.groups = g_urls\n              profile.tensions = t_urls\n\n\n            }\n\n\n          }\n          //  profile.groups = await this.getGroups(webId)\n          //  profile.tensions = await this.getTensions(webId)\n          console.log(\"PROFILE\",webId, profile)\n        }\n\n        // ???  Does not work profile.photo = await p.getString(vcard.hasPhoto)\n        /*  let photo = await solid.data.[webId].vcard$hasPhoto\n        profile.photo = `${photo}`*/\n      }catch(e){\n        //console.log(e)\n        this.makeToast(e.message, webId, 'warning')\n      }\n      //  console.log(profile)\n      return profile\n    },\n    getInboxUrls: async function(webId){\n      let inbox_urls = []\n      try{\n        let profileDoc = await fetchDocument(webId);\n        const p = profileDoc.getSubject(webId)\n        inbox_urls = await  p.getAllRefs(ldp.inbox )\n      }catch(e){\n        //alert(webId+\" : \"+e)\n        this.makeToast(e.message, webId, 'warning')\n      }\n      return inbox_urls\n    },\n    getFriends: async function(webId){\n      let friends = []\n      try{\n        let profileDoc = await fetchDocument(webId);\n        const p = profileDoc.getSubject(webId)\n        friends = await  p.getAllRefs(foaf.knows )\n      }catch(e){\n        //alert(webId+\" : \"+e)\n        this.makeToast(e.message, webId, 'warning')\n      }\n      return friends\n    },\n\n\n\n    getWorkspaces: async function(webId){\n\n      let workspaces = []\n      let storage =  await solid.data[webId].storage\n      let indexFile = storage+\"public/popock/workspaces.ttl\"\n      //  console.log(webId, storage, indexFile)\n      if ( fc.itemExists(indexFile)){\n        let workspacesDoc = {}\n        try{\n          workspacesDoc = await fetchDocument(indexFile)\n          let subjects = workspacesDoc.getAllSubjectsOfType(\"http://www.w3.org/ns/pim/space#Workspace\")\n          for  (let s of subjects) {\n            let name = s.getLiteral(rdf.label)\n            let path = s.getRef(\"http://www.w3.org/ns/pim/space#storage\")\n            let pod = s.getRef(\"http://www.w3.org/ns/solid/terms#webId\")\n            workspaces.push({name: name, path: path, pod: pod, subject: s.asRef().split('#')[1]})\n          }\n        }catch(e){\n          //  console.log(e)\n          //  workspacesDoc = await createDocument(indexFile)\n        }\n      }\n\n\n      //console.log(\"WWWW workspaces\",workspaces)\n      return workspaces\n    },\n    getGroups: async function(webId){\n      let groups = []\n      let   workspaces = await this.getWorkspaces(webId)\n\n      if (workspaces.length > 0){\n        console.log(webId, workspaces)\n        workspaces.forEach(async function (w) {\n\n          if(w.name == 'gouvernance'){\n            console.log(w.name, w.path, w.subject)\n            let folder = w.path+'groups'\n            console.log(\"groups_folder\", folder)\n            let f = await fc.readFolder(folder)\n            groups = f.files\n            console.log(\"GGGGGGGRRRRoups 2\",groups)\n            return groups\n          }\n        });\n\n      }\n\n    },\n\n    getTensions: async function(webId){\n      let tensions = []\n      let   workspaces = await this.getWorkspaces(webId)\n\n      if (workspaces.length > 0){\n        console.log(webId, workspaces)\n        workspaces.forEach(async function (w) {\n          console.log(w.name, w.path, w.subject)\n          if(w.name == 'gouvernance'){\n            let folder = w.path+'tensions'\n            console.log(\"TTTTTTTTTension folder\", folder)\n            let f = await fc.readFolder(folder)\n            tensions = f.files\n            console.log(\"TTTTTENSIONS\",tensions)\n          }\n        });\n      }\n      return tensions\n    },\n\n\n\n\n\n\n\n    addIndex: async function(fullpath, classe, name){\n      let inst  =  fullpath+\"/index.ttl#this\"\n      var dateObj = new Date();\n      var date = dateObj.toISOString()\n\n      //      console.log(inst, classe, name, webId)\n      let puti = this.$store.state.solid.indexes.puti\n      //    console.log(puti)\n      let putiDoc = await fetchDocument(puti.url)\n      let newchat = await putiDoc.addSubject()\n      //subj.addLiteral(dct.created, date)\n      newchat.addLiteral(rdfs.label, name)\n      newchat.addNodeRef(\"http://www.w3.org/ns/solid/terms#forClass\", classe)\n      newchat.addNodeRef(\"http://www.w3.org/ns/solid/terms#instance\", inst)\n      newchat.addLiteral(dct.created, date)\n      await putiDoc.save();\n\n    },\n    getIndexes: async function(webId){\n      let indexes = {puti: {instances: [], classes: []}, prti: {instances: [], classes: []}}\n      try{\n        let profileDoc = await fetchDocument(webId);\n        const subject = profileDoc.getSubject(webId)\n\n        let puti = await  subject.getNodeRef(\"http://www.w3.org/ns/solid/terms#publicTypeIndex\" )\n        let prti = await  subject.getNodeRef(\"http://www.w3.org/ns/solid/terms#privateTypeIndex\" )\n\n        //    console.log(puti)\n        //    console.log(prti)\n        indexes.puti.url = puti\n        indexes.prti.url = prti\n        let putiDoc = await fetchDocument(puti)\n        //  let prtiDoc = await fetchDocument(prti)\n        //    console.log(putiDoc)\n        //    console.log(prtiDoc)\n        let puIndexes = await putiDoc.findSubjects(\"http://www.w3.org/ns/solid/terms#forClass\")\n        //  let prIndexes = await prtiDoc.findSubjects(\"http://www.w3.org/ns/solid/terms#forClass\")\n        //    console.log(puIndexes,prIndexes)\n\n        puIndexes.forEach( async function(index) {\n          let classe = await index.getRef(\"http://www.w3.org/ns/solid/terms#forClass\")\n          let instance = await index.getRef(\"http://www.w3.org/ns/solid/terms#instance\")\n          let created = await index.getString(dct.created)\n          let label = await index.getString(rdfs.label)\n          //    console.log(instance, classe)\n          indexes.puti.instances.push({instance: instance, classe: classe, label: label, created: created})\n          indexes.puti.classes[classe] ==  undefined ? indexes.puti.classes[classe] = [] : \"\"\n          indexes.puti.classes[classe].push(instance)\n        });\n\n        /*  prIndexes.forEach( async function(index) {\n        let classe = await index.getRef(\"http://www.w3.org/ns/solid/terms#forClass\")\n        let instance = await index.getRef(\"http://www.w3.org/ns/solid/terms#instance\")\n        let created = await index.getString(dct.created)\n        let label = await index.getString(rdfs.label)\n        //    console.log(instance, classe)\n        indexes.prti.instances.push({instance: instance, classe: classe, label: label, created: created})\n        indexes.prti.classes[classe] ==  undefined ? indexes.prti.classes[classe] = [] : \"\"\n        indexes.prti.classes[classe].push(instance)\n      });*/\n\n\n\n    }catch(e){\n      //  console.log(e)\n    }\n    console.log(webId, indexes)\n    return indexes\n  },\n  makeToast(title, content,variant = null) {\n    this.$bvToast.toast(content , {\n      title: title,\n      variant: variant,\n      solid: true\n    })\n  }\n}\n\n\n}\n","//https://docs.inrupt.com/client-libraries/solid-client-js/tutorial/manage-access-control-list.html\nimport {\n  getSolidDatasetWithAcl,\n  getPublicAccess,\n  hasResourceAcl,\n  hasFallbackAcl,\n  hasAccessibleAcl,\n  //createAcl,\n  createAclFromFallbackAcl,\n  getResourceAcl,\n  getAgentAccess,\n  //  getAgentAccessAll,\n  //  setAgentResourceAccess,\n  setAgentResourceAccess,\n  setAgentDefaultAccess,\n  setPublicResourceAccess,\n  setPublicDefaultAccess,\n  saveAclFor,\n} from \"@inrupt/solid-client\";\n\nimport { fetchDocument, createDocument } from 'tripledoc';\nimport { schema } from 'rdf-namespaces'\n\nimport auth from 'solid-auth-client';\nimport FC from 'solid-file-client'\nconst fc = new FC( auth )\n\nexport default {\n  created(){\n\n  },\n  methods: {\n    async configureInbox(inbox_url, webId){\n      console.log(\"configureInbox\",inbox_url, webId,this.storage)\n      let inbox_log_file = this.storage+\"popock/inbox_log.ttl\"\n      let inbox_exists = await fc.itemExists(inbox_url)\n      if (!inbox_exists){\n        await fc.createFolder(inbox_url)\n      }\n\n\n      let logDoc ={}\n      try{\n        logDoc = await fetchDocument(inbox_log_file);\n      } catch(e){\n        logDoc = await createDocument(inbox_log_file);\n        let s = logDoc.addSubject()\n        s.addNodeRef(schema.about, \"init\")\n        //  console.log(logDoc)\n        await logDoc.save()\n      }\n\n\n\n\n\n\n      try{\n        const inboxtWithAcl = await getSolidDatasetWithAcl(inbox_url);\n        const agentAccess = getAgentAccess(inboxtWithAcl, webId);\n        const publicAccess = getPublicAccess(inboxtWithAcl);\n        if(agentAccess == null){\n          alert (\"Are you sure that you have allowed me to 'CONTROL' your POD, I can't read Acl of \"+inbox_url+\". I got a NULL value !! Please check your POD / Preferences / Trusted Application. \")\n        }\n\n        /*  if( !(await fc.itemExists(inbox_log_file)) ) {\n        console.log(\"creation:\",inbox_log_file)\n        await fc.postFile( inbox_log_file, \" \", \"text/turtle\") // only create if it doesn't already exist\n      }*/\n\n\n\n\n\n      console.log(\"inbox_url: \", inbox_url, \"inbox_exists: \", inbox_exists, \"agentAcces: \", agentAccess, \"publicAccess:\", publicAccess )\n      let inbox_log_file_exists = await fc.itemExists(inbox_log_file)\n      console.log(\"inbox_log_file_exists:\", inbox_log_file_exists)\n\n\n\n      let resourceAcl;\n      if (!hasResourceAcl(inboxtWithAcl)) {\n        if (!hasAccessibleAcl(inboxtWithAcl)) {\n          throw new Error(\n            \"The current user does not have permission to change access rights to this Resource.\"\n          );\n        }\n        if (!hasFallbackAcl(inboxtWithAcl)) {\n          throw new Error(\n            \"The current user does not have permission to see who currently has access to this Resource.\"\n          );\n          // Alternatively, initialise a new empty ACL as follows,\n          // but be aware that if you do not give someone Control access,\n          // **nobody will ever be able to change Access permissions in the future**:\n          // resourceAcl = createAcl(myDatasetWithAcl);\n        }\n        resourceAcl = createAclFromFallbackAcl(inboxtWithAcl);\n      } else {\n        resourceAcl = getResourceAcl(inboxtWithAcl);\n      }\n\n\n      const updatedAgentResourceAccess = setAgentResourceAccess(\n        resourceAcl,\n        webId,\n        { read: true, append: true, write: true, control: true },\n      );\n      const updatedAgentDefaultAccess = setAgentDefaultAccess(\n        resourceAcl,\n        webId,\n        { read: true, append: true, write: true, control: true },\n      );\n      const updatedPublicResourceAccess = setPublicResourceAccess(\n        resourceAcl,\n        { read: true, append: true, write: false, control: false },\n      );\n      const updatedPublicDefaultAccess = setPublicDefaultAccess(\n        resourceAcl,\n        { read: false, append: true, write: false, control: false },\n      );\n\n      //    console.log(\"DOSSIER, EVERYONE POSTER, DEFAULT EVERYONE SUBMITTERS\",updatedAgentResourceAccess, updatedAgentResourceAccess)\n      try{\n        // Now save the ACL:\n        await saveAclFor(inboxtWithAcl, updatedAgentResourceAccess);\n        console.log(\"owner Resource\")\n      }catch(e){\n        console.log(\"todo if 409 conflict : must test if ok before patch\" /*,e*/)          }\n        try{\n          await saveAclFor(inboxtWithAcl, updatedAgentDefaultAccess);\n          console.log(\"owner default\")\n        }catch(e){\n          console.log(\"todo if 409 conflict : must test if ok before patch\" /*,e*/)          }\n          try{\n            await saveAclFor(inboxtWithAcl, updatedPublicResourceAccess);\n            console.log(\"posters Resource\")\n          }catch(e){\n            console.log(\"todo if 409 conflict : must test if ok before patch\" /*,e*/)\n          }\n          try{\n            await saveAclFor(inboxtWithAcl, updatedPublicDefaultAccess);\n            console.log(\"submitters Default\")\n\n          }catch(e){\n            console.log(\"todo if 409 conflict : must test if ok before patch\" /*,e*/)\n          }\n\n\n          const logFileWithAcl = await getSolidDatasetWithAcl(inbox_log_file);\n\n          let logAcl;\n          if (!hasResourceAcl(logFileWithAcl)) {\n            if (!hasAccessibleAcl(logFileWithAcl)) {\n              throw new Error(\n                \"The current user does not have permission to change access rights to this Resource.\"\n              );\n            }\n            if (!hasFallbackAcl(logFileWithAcl)) {\n              throw new Error(\n                \"The current user does not have permission to see who currently has access to this Resource.\"\n              );\n              // Alternatively, initialise a new empty ACL as follows,\n              // but be aware that if you do not give someone Control access,\n              // **nobody will ever be able to change Access permissions in the future**:\n              // resourceAcl = createAcl(myDatasetWithAcl);\n            }\n            logAcl = createAclFromFallbackAcl(logFileWithAcl);\n          } else {\n            logAcl = getResourceAcl(logFileWithAcl);\n          }\n\n          console.log(\"Log acl\", logAcl)\n          const updatedPublicLogAccess = setPublicResourceAccess(\n            logAcl,\n            { read: true, append: true, write: false, control: false },\n          );\n          //    try{\n          await saveAclFor(logFileWithAcl, updatedPublicLogAccess);\n          console.log(\"logfile Default\")\n\n          //  }catch(e){\n          //  console.log(\"todo if 409 conflict : must test if ok before patch\" /*,e*/)\n          //}\n\n          //console.log(\"just for block\",inboxtWithAcl, updatedAcl,saveAclFor);\n\n        }catch(e){\n          console.log(\"erreur\",e)\n        }\n\n        // cleaning for debug\n        //await fc.deleteFile(inbox_log_file)\n\n\n\n      },\n\n    }\n  }\n"],"sourceRoot":""}